@startuml

title UGUIChartRecorder

namespace Provider{
  TransformObserver -> Model.Recorder
  Observer -> Model.Recorder
  RandomValueGenerator -> Model.Recorder
}

namespace Model{

  class Recorder #DDCCCC{
    -DataList : List<Data>
    -Timeline : Data
    +OnUpdateData : Action
    +DataKeyCount : int
    +bool IsKeyValid(int key)
    +Reader GetData(int key)
    +Reader GetTimeline()
    +void SetData(int key, float value)
    +void Determine()
    +void ClearAll()
    -int RegisterData(string dataname)

    +void ToggleDataAccept(bool toggle)
  }
  Recorder "1" o-- "1..*" Data

  class Data{
    -values : float?[]
    +Data(string name)
    +Reader GetReader()
    +void SetCurrent(float value)
    +void Determine()
  }
  Data - Reader

  class Reader{
    +Name : string
    +Color : Color
    +Count : int
    +this[] : float?
  }

  class Scope{
    +OnUpdateScope : Action
    +ScopeRect : Rect
    +Offset : Vector2
    +Scale : Vector2

    +firstIndex : int
    +lastIndex : int

    +GridScale : Vector2
    +GridSubdivision : IntVector2
  }
  Scope "0..*" --o "1" Recorder

  class Exporter{
    +void Export(stirng path)
    +void Export(stirng path,Scope scope, int[] keys)
  }
  Exporter -> Recorder
  Exporter -u-> Scope
}

namespace View{
  abstract class ViewBase{
    #scope : Scope
  }
  ViewBase -> Model.Scope

  Plotter ..|> ViewBase
  Plotter -> Model.Recorder

  Grid ..|> ViewBase
  Label ..|> ViewBase
}

namespace Controller{
  abstract class ControllerBase{
    #Scope : Scope
  }
  ControllerBase -> Model.Scope
  ScopeScroller ..|> ControllerBase
  ScopeScaler ..|> ControllerBase
}
@enduml
